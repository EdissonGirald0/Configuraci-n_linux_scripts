#!/bin/bash

# Script de demostraci√≥n para mostrar las capacidades de pruebas
# Uso: ./demo-tests.sh

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Funci√≥n de logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${CYAN}[INFO]${NC} $1"
}

# Funci√≥n para mostrar banner
show_banner() {
    echo -e "${PURPLE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    üß™ DEMO DE PRUEBAS                        ‚ïë"
    echo "‚ïë              Sistema de Configuraci√≥n Linux                  ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# Funci√≥n para mostrar men√∫
show_menu() {
    echo -e "${CYAN}Selecciona una opci√≥n de demostraci√≥n:${NC}"
    echo
    echo "1. üü¢ Modo Simulaci√≥n (100% Seguro)"
    echo "2. üê≥ Pruebas en Docker (Aislado)"
    echo "3. üíæ Crear Backup del Sistema"
    echo "4. üõ°Ô∏è  Pruebas Seguras con Backup"
    echo "5. ‚ö†Ô∏è  Pruebas Completas (Solo VM)"
    echo "6. üìä Ver Informaci√≥n del Sistema"
    echo "7. üîß Verificar Prerrequisitos"
    echo "8. üìñ Mostrar Ayuda"
    echo "9. üö™ Salir"
    echo
}

# Funci√≥n para modo simulaci√≥n
demo_dry_run() {
    echo -e "${GREEN}üü¢ DEMO: Modo Simulaci√≥n${NC}"
    echo "Este modo es 100% seguro y no hace cambios reales en tu sistema."
    echo
    info "Ejecutando modo simulaci√≥n..."
    
    if ./scripts/test-system.sh dry-run -v; then
        success "¬°Demo de simulaci√≥n completada exitosamente!"
    else
        error "Error en la demo de simulaci√≥n"
    fi
}

# Funci√≥n para pruebas Docker
demo_docker() {
    echo -e "${BLUE}üê≥ DEMO: Pruebas en Docker${NC}"
    echo "Este modo ejecuta las pruebas en un contenedor aislado."
    echo
    info "Verificando Docker..."
    
    if ! command -v docker &> /dev/null; then
        warning "Docker no est√° instalado. Instalando..."
        sudo apt update
        sudo apt install -y docker.io docker-compose
        sudo usermod -aG docker $USER
        newgrp docker
    fi
    
    info "Ejecutando pruebas en Docker..."
    
    if ./scripts/test-system.sh docker; then
        success "¬°Demo de Docker completada exitosamente!"
    else
        error "Error en la demo de Docker"
    fi
}

# Funci√≥n para crear backup
demo_backup() {
    echo -e "${YELLOW}üíæ DEMO: Crear Backup del Sistema${NC}"
    echo "Este modo crea un snapshot completo de tu sistema."
    echo
    info "Creando backup del sistema..."
    
    if sudo ./scripts/backup-system.sh "demo_backup_$(date +%Y%m%d_%H%M%S)"; then
        success "¬°Backup creado exitosamente!"
        info "Ubicaci√≥n: /root/system_backups/"
    else
        error "Error al crear backup"
    fi
}

# Funci√≥n para pruebas seguras
demo_safe() {
    echo -e "${YELLOW}üõ°Ô∏è  DEMO: Pruebas Seguras${NC}"
    echo "Este modo crea un backup autom√°tico antes de las pruebas."
    echo
    warning "¬øDeseas continuar con las pruebas seguras? (y/N)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        info "Demo cancelada por el usuario"
        return 0
    fi
    
    info "Ejecutando pruebas seguras..."
    
    if ./scripts/test-system.sh safe -m python; then
        success "¬°Demo de pruebas seguras completada!"
    else
        error "Error en las pruebas seguras"
    fi
}

# Funci√≥n para pruebas completas
demo_full() {
    echo -e "${RED}‚ö†Ô∏è  DEMO: Pruebas Completas${NC}"
    echo "ADVERTENCIA: Este modo puede modificar tu sistema."
    echo "Solo ejecuta esto en un entorno controlado o VM."
    echo
    warning "¬øEst√°s seguro de que quieres continuar? (y/N)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        info "Demo cancelada por el usuario"
        return 0
    fi
    
    warning "¬øRealmente est√°s seguro? Esto puede modificar tu sistema. (y/N)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        info "Demo cancelada por el usuario"
        return 0
    fi
    
    info "Ejecutando pruebas completas..."
    
    if ./scripts/test-system.sh full; then
        success "¬°Demo de pruebas completas finalizada!"
    else
        error "Error en las pruebas completas"
    fi
}

# Funci√≥n para mostrar informaci√≥n del sistema
demo_system_info() {
    echo -e "${CYAN}üìä DEMO: Informaci√≥n del Sistema${NC}"
    echo
    info "Informaci√≥n del sistema:"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    echo -e "${GREEN}Distribuci√≥n:${NC}"
    lsb_release -a 2>/dev/null || cat /etc/os-release
    
    echo -e "${GREEN}Kernel:${NC}"
    uname -a
    
    echo -e "${GREEN}Arquitectura:${NC}"
    arch
    
    echo -e "${GREEN}CPU:${NC}"
    lscpu | grep "Model name" | head -1
    
    echo -e "${GREEN}Memoria:${NC}"
    free -h
    
    echo -e "${GREEN}Disco:${NC}"
    df -h /
    
    echo -e "${GREEN}Docker:${NC}"
    if command -v docker &> /dev/null; then
        docker --version
    else
        echo "No instalado"
    fi
    
    echo -e "${GREEN}Python:${NC}"
    python3 --version 2>/dev/null || echo "No instalado"
    
    echo -e "${GREEN}Node.js:${NC}"
    node --version 2>/dev/null || echo "No instalado"
    
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
}

# Funci√≥n para verificar prerrequisitos
demo_check_prerequisites() {
    echo -e "${CYAN}üîß DEMO: Verificar Prerrequisitos${NC}"
    echo
    info "Verificando prerrequisitos del sistema..."
    
    local all_good=true
    
    # Verificar scripts
    if [[ -x "./scripts/test-system.sh" ]]; then
        success "‚úì Script test-system.sh disponible"
    else
        error "‚úó Script test-system.sh no disponible o sin permisos"
        all_good=false
    fi
    
    if [[ -x "./scripts/backup-system.sh" ]]; then
        success "‚úì Script backup-system.sh disponible"
    else
        error "‚úó Script backup-system.sh no disponible o sin permisos"
        all_good=false
    fi
    
    if [[ -x "./setup.sh" ]]; then
        success "‚úì Script setup.sh disponible"
    else
        error "‚úó Script setup.sh no disponible o sin permisos"
        all_good=false
    fi
    
    # Verificar Docker
    if command -v docker &> /dev/null; then
        success "‚úì Docker instalado"
    else
        warning "‚ö† Docker no instalado (opcional)"
    fi
    
    if command -v docker-compose &> /dev/null; then
        success "‚úì Docker Compose instalado"
    else
        warning "‚ö† Docker Compose no instalado (opcional)"
    fi
    
    # Verificar directorios
    if [[ -d "./config" ]]; then
        success "‚úì Directorio config disponible"
    else
        error "‚úó Directorio config no encontrado"
        all_good=false
    fi
    
    if [[ -d "./modules" ]]; then
        success "‚úì Directorio modules disponible"
    else
        error "‚úó Directorio modules no encontrado"
        all_good=false
    fi
    
    if [[ -d "./docker-test" ]]; then
        success "‚úì Directorio docker-test disponible"
    else
        warning "‚ö† Directorio docker-test no encontrado (opcional)"
    fi
    
    echo
    if [[ "$all_good" == true ]]; then
        success "¬°Todos los prerrequisitos principales est√°n listos!"
    else
        error "Algunos prerrequisitos no est√°n disponibles"
    fi
}

# Funci√≥n para mostrar ayuda
demo_help() {
    echo -e "${CYAN}üìñ DEMO: Ayuda y Documentaci√≥n${NC}"
    echo
    echo "Este script de demostraci√≥n te permite probar el sistema de configuraci√≥n"
    echo "de forma segura sin afectar tu sistema principal."
    echo
    echo -e "${GREEN}Opciones disponibles:${NC}"
    echo "1. üü¢ Modo Simulaci√≥n: Muestra qu√© har√≠a sin cambios reales"
    echo "2. üê≥ Docker: Pruebas en contenedor aislado"
    echo "3. üíæ Backup: Crea snapshot del sistema"
    echo "4. üõ°Ô∏è  Seguro: Backup autom√°tico + pruebas"
    echo "5. ‚ö†Ô∏è  Completo: Solo en VM/entorno controlado"
    echo
    echo -e "${GREEN}Recomendaci√≥n de uso:${NC}"
    echo "1. Empieza con 'Modo Simulaci√≥n'"
    echo "2. Si tienes Docker, prueba 'Docker'"
    echo "3. Para pruebas reales, usa 'Seguro'"
    echo "4. Solo usa 'Completo' en VM"
    echo
    echo -e "${GREEN}Archivos importantes:${NC}"
    echo "- ./scripts/test-system.sh: Script principal de pruebas"
    echo "- ./scripts/backup-system.sh: Creaci√≥n de backups"
    echo "- ./config/ejemplo_config.yaml: Configuraci√≥n de ejemplo"
    echo "- ./docker-test/: Entorno de pruebas Docker"
    echo
    echo -e "${GREEN}Para m√°s informaci√≥n:${NC}"
    echo "- README.md: Documentaci√≥n completa"
    echo "- docker-test/README.md: Documentaci√≥n Docker"
    echo "- ./scripts/test-system.sh --help: Ayuda del script"
}

# Funci√≥n principal
main() {
    show_banner
    
    while true; do
        show_menu
        read -p "Selecciona una opci√≥n (1-9): " choice
        
        case $choice in
            1)
                demo_dry_run
                ;;
            2)
                demo_docker
                ;;
            3)
                demo_backup
                ;;
            4)
                demo_safe
                ;;
            5)
                demo_full
                ;;
            6)
                demo_system_info
                ;;
            7)
                demo_check_prerequisites
                ;;
            8)
                demo_help
                ;;
            9)
                echo
                success "¬°Gracias por usar el demo de pruebas!"
                exit 0
                ;;
            *)
                error "Opci√≥n inv√°lida. Por favor selecciona 1-9."
                ;;
        esac
        
        echo
        read -p "Presiona Enter para continuar..."
        echo
    done
}

# Ejecutar funci√≥n principal
main "$@" 